from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F, types
from aiogram import Router
import datetime
from parseit import parser
from config import cities

router = Router()


@router.message(F.text == "–û –±–æ—Ç–µ")
async def github_func(message: types.Message):
    url_buttons = InlineKeyboardBuilder()
    url_buttons.row(
        types.InlineKeyboardButton(text='–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ', url='https://github.com/NotAKes/one-frog-bot_bot/issues'))
    url_buttons.row(types.InlineKeyboardButton(text='Github –ø—Ä–æ–µ–∫—Ç–∞', url='https://github.com/NotAKes/one-frog-bot'))
    url_buttons.row(types.InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É', url='t.me/notakees'))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—Éüîó', reply_markup=url_buttons.as_markup(), )


@router.message(F.text == "–ú–æ—Å–∫–≤–∞")
async def place_msk_func(message: types.Message):
    global place
    place = ''
    place = cities["MSK"]
    await choosetime_func(message)


@router.message(F.text == "–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ")
async def place_oz_func(message: types.Message):
    global place
    place = ''
    place = cities["OZ"]
    await choosetime_func(message)


@router.message(F.text == "–ê—Å—Ç–∞–Ω–∞")
async def place_ast_func(message: types.Message):
    global place
    place = ''
    place = cities["AST"]
    await choosetime_func(message)


@router.message(F.text == "–°.–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
async def place_spb_func(message: types.Message):
    global place
    place = ''
    place = cities["SPB"]
    await choosetime_func(message)


@router.message(F.text == "–ú–∏–Ω—Å–∫")
async def place_minsk_func(message: types.Message):
    global place
    place = ''
    place = cities["MINSK"]
    await choosetime_func(message)


@router.message(F.text == "–°–µ–≥–æ–¥–Ω—èüïì")
async def today(message: types.Message):
    global date
    date = 1
    if place:
        await message.reply(
            f" <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now()).date(), "%d.%m.%Y")}\n</b>"
            f"\n"
            f"{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


@router.message(F.text == "–ó–∞–≤—Ç—Ä–∞üïì")
async def yesterday(message: types.Message):
    global date
    date = 2
    if place:
        await message.reply(
            f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now() + datetime.timedelta(days=1)).date(), "%d.%m.%Y")}</b>\n"
            f"\n"
            f"{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


@router.message(F.text == "3 –¥–Ω—èüóì")
async def threedays(message: types.Message):
    if place:
        for date in range(2, 5):
            await message.answer(
                f" <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now() + datetime.timedelta(days=date - 1)).date(), "%d.%m.%Y")}</b> \n"
                f"\n{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


@router.message(F.text == "–ù–µ–¥–µ–ª—èüóì")
async def week(message: types.Message):
    if place:
        for date in range(2, 9):
            await message.answer(
                f" <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {datetime.datetime.strftime((datetime.datetime.now() + datetime.timedelta(days=date - 1)).date(), "%d.%m.%Y")}</b> \n"
                f"\n"
                f"{parser(date, list_=place)}", parse_mode="html")
    else:
        await message.reply("–ú–µ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
        await choose_place(message)


# –ö–æ–º–∞–Ω–¥–∞ /menu
@router.message(Command("menu"))
async def call_menu(message: types.Message):
    await menu(message)


# –ö–æ–º–∞–Ω–¥–∞ /place
@router.message(Command("place"))
async def call_place(message: types.Message):
    await choose_place(message)


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ–≥–æ–¥—É:")
    await menu(message)


@router.message(F.text == "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
async def choose_place(message: types.Message):
    inp = [
        [
            types.KeyboardButton(text="–ú–æ—Å–∫–≤–∞"),
            types.KeyboardButton(text="–°.–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
            types.KeyboardButton(text="–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ"),
            types.KeyboardButton(text="–ê—Å—Ç–∞–Ω–∞"),
            types.KeyboardButton(text="–ú–∏–Ω—Å–∫")
        ],

    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=inp,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
    )
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:\n\n üá∑üá∫ –ú–æ—Å–∫–≤–∞, –°.–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ\n üáßüáæ –ú–∏–Ω—Å–∫ \n üá∞üáø –ê—Å—Ç–∞–Ω–∞ \n {"-" * 40} \n–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
        reply_markup=keyboard)


@router.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "–ü–æ—Ö–æ–∂–µ, —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu. –ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @notakees")


async def choosetime_func(message: types.Message):
    inp = [
        [
            types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—èüïì"),
            types.KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞üïì"),
            types.KeyboardButton(text="3 –¥–Ω—èüóì"),
            types.KeyboardButton(text="–ù–µ–¥–µ–ª—èüóì")
        ],

    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=inp,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è..."
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—èüïì", reply_markup=keyboard)


async def menu(message: types.Message):
    inp = [
        [
            types.KeyboardButton(text="–û –±–æ—Ç–µ"),
            types.KeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=inp,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é"
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é‚öôÔ∏è", reply_markup=keyboard)
